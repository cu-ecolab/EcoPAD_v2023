# this is for running TECO-SPRUCE

import os
import subprocess 
from jinja2 import Template
curPath = os.path.dirname(__file__)

# def run_TECO_SPRUCE(paraFile):
#     # use the old way to call TECO-SPRUCE model:
#     # % Option 0 and option 1 have same argument:
#     # ./TECO.out input/SPRUCE_pars.txt input/SPRUCE_forcing.txt input/SPRUCE_obs.txt output/ 0 input/SPRUCE_da_pars.txt
#     # % Option 2:
#     # ./TECO.out input/SPRUCE_pars.txt input/SPRUCE_forcing.txt input/SPRUCE_obs.txt output/ 2 input/SPRUCE_da_pars.txt input/Weathergenerate 2024 365 2.25 380.0

#     # % 1st argument is parameter file generated from portal
#     # % 2nd argument is historical forcing file from SPRUCE site
#     # % 3rd argument is observation file, data complied manually or will be partially automated 
#     # % 4th argument is output folder
#     # % 5th argument is 0, 1 and 2 to run simulation, data assimilation or forecasting, respectively
#     # % 6th argument is DA checkbox file generated from portal, users can choose what parameters to do DA
#     # % 7th argument is the future forcing files, pre-generated by stochastic model
#     # % 8th argument is the year users want to forecast (maximum 2024)
#     # % 9th argument is the day of the year users want to forecast
#     # % 10th argument is temperature treatment (default 0.0, allow users to add 0~9 celsius degree)
#     # % 11th argument is CO2 treatment (default ambient atmosphere 380.0ppm, allow users to type 380~900ppm)
#     # results = subprocess.run(curPath+"/run", check=True, capture_output=True, shell=True)

    
#     (status, output) = subprocess.getstatusoutput(curPath+"/run"+" "+paraFile+" "+forcingFile+" "+outPath)
#     print(status)

def create_template(params,resultDir,check_function): 
    # Jian: put the template to model_name/site_name/templates/tmpl_xxx.tmpl
    tmpl = os.path.join(curPath, "templates/tmpl_pars.tmpl")
    with open(tmpl,'r') as f:
        template=Template(f.read())
    params_file = os.path.join(resultDir,'{0}.txt'.format("parameters"))
    with open(params_file,'w') as f2:
        obj = check_function(params)
        print(obj)
        f2.write(template.render(check_function(params)))
    return params_file #'{0}.txt'.format(tmpl_name)

def check_params(pars):
    """ Check params and make floats."""
    filePath_pars = os.path.join(curPath, "templates/default_parameters_list.txt")
    dat_ls_pars = open(filePath_pars, "r").read()   # Jian: get the list of pars from model folder
    ls_pars     = dat_ls_pars.replace("\n",'').replace("\"",'').split(",") # Jian: parser the list of pars
    # for param in ["latitude","longitude","wsmax","wsmin","LAIMAX","LAIMIN","SapS","SLA","GLmax","GRmax","Gsmax",
    #                 "extkU","alpha","Tau_Leaf","Tau_Wood","Tau_Root","Tau_F","Tau_C","Tau_Micro","Tau_SlowSOM",
    #                 "gddonset","Rl0" ]:
    for param in ls_pars:
        try:
            inside_check(pars,param)
        except Exception as e:
            # print("ettttt:", e)
            pass
        try:
            inside_check(pars, "min_{0}".format(param))
        except:
            pass
        try:
            inside_check(pars, "max_{0}".format(param))
        except:
            pass
    return pars 

def inside_check(pars,param):
   if not "." in str(pars[param]):
       pars[param]="%s." % (str(pars[param]))
   else:
       pars[param]=str(pars[param]) 

def readYml(ymlName):
    import yaml
    from yaml.loader import SafeLoader
    # Open the file and load the file
    with open(ymlName) as f:
        data = yaml.load(f, Loader=SafeLoader)
    return data

def run(paramsFile,forcingFile, path_task, outPath):
    params  = readYml(paramsFile)["params"]
    parFile = create_template(params, os.path.join(path_task,"input"),check_params)
    # forcingFile = os.path.join(dictSettings["rootPath"],dictSettings["TECO_SPRUCE"]["forcingFile"])
    # forcingFile = # dictSettings["TECO_SPRUCE"]["forcingFile"]
    (status, output) = subprocess.getstatusoutput(curPath+"/run"+" "+parFile+" "+forcingFile+" "+outPath)
    print(status, output)
    return outPath+"/Simu_dailyflux14001.csv"